/* eslint-disable */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var Module = require('module');
var esbuild = require('esbuild');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var Module__default = /*#__PURE__*/_interopDefaultLegacy(Module);

/**
 * Register a `require` hook that transforms ESM files.
 * @param options Optional additional `esbuild` transform options.
 * @returns An unregister function that restores the state before registering.
 */
function register(options) {
    const transformOptions = {
        target: `node${process.versions.node.split(".")[0]}`,
        format: "cjs",
        loader: "js",
        ...options,
    };
    function esbuild$1(module, filename) {
        const source = fs__default["default"].readFileSync(filename, "utf-8");
        const result = esbuild.transformSync(source, transformOptions).code;
        return module._compile(result, filename);
    }
    const extensions = Module__default["default"]._extensions;
    const js = extensions[".js"];
    const mjs = extensions[".mjs"];
    extensions[".js"] = function (module, filename) {
        try {
            return js(module, filename);
        }
        catch (e) {
            if (e &&
                (e.code === "ERR_REQUIRE_ESM" ||
                    e.message?.includes("Cannot use import statement outside a module") ||
                    e.message?.includes("Unexpected token 'export'"))) {
                return esbuild$1(module, filename);
            }
            throw e;
        }
    };
    extensions[".mjs"] ?? (extensions[".mjs"] = function (module, filename) {
        return esbuild$1(module, filename);
    });
    return () => {
        extensions[".js"] = js;
        extensions[".mjs"] = mjs;
    };
}

exports.register = register;
//# sourceMappingURL=index.js.map
